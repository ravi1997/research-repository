{
	"info": {
		"_postman_id": "5b94abac-3d06-4522-b1ac-0573b6d5b097",
		"name": "research repository",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25872699"
	},
	"item": [
		{
			"name": "main",
			"item": [
				{
					"name": "index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"cookie = pm.cookies.all()\r",
									"pm.environment.set('cookie',cookie)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{main_route}}/",
							"host": [
								"{{main_route}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"cookie = pm.cookies.all()\r",
									"pm.environment.set('cookie',cookie)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{main_route}}/login",
							"host": [
								"{{main_route}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "super admin",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Require the crypto-js module\r",
											"const CryptoJS = require('crypto-js');\r",
											"\r",
											"// Retrieve cookies and insert them\r",
											"const cookies = pm.environment.get('cookie');\r",
											"cookies.forEach((cookie, index) => {\r",
											"    pm.cookies.insert(cookie);\r",
											"});\r",
											"\r",
											"// Retrieve salt from cookies and check if it exists\r",
											"const salt = pm.cookies.get('Session-SALT')[\"value\"];\r",
											"if (!salt) {\r",
											"    // Log an error and stop the script if salt is undefined\r",
											"    console.error(\"Error: 'Session-SALT' cookie is not defined.\");\r",
											"    pm.request.body.raw = JSON.stringify({ \"error\": \"Missing salt for encryption\" });\r",
											"} else {\r",
											"    // Hashing function using CryptoJS SHA-256\r",
											"    function hashSalt(salt) {\r",
											"        const hash = CryptoJS.SHA256(salt);\r",
											"        return hash.toString(CryptoJS.enc.Hex);\r",
											"    }\r",
											"\r",
											"    // Encryption function\r",
											"    function cipher(salt) {\r",
											"        const hashedSalt = hashSalt(salt);\r",
											"        const textToChars = text => text.split('').map(c => c.charCodeAt(0));\r",
											"        const byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2);\r",
											"        const applySaltToChar = code => textToChars(hashedSalt).reduce((a, b) => a ^ b, code);\r",
											"\r",
											"        return text => text.split('')\r",
											"            .map(textToChars)\r",
											"            .map(applySaltToChar)\r",
											"            .map(byteHex)\r",
											"            .join('');\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        // Encrypt JSON data with salt\r",
											"        const encryptWithSalt = cipher(salt);\r",
											"        const jsonData = JSON.parse(pm.request.body.raw);\r",
											"        const jsonString = JSON.stringify(jsonData);\r",
											"        console.log(jsonString);\r",
											"        const encryptedData = encryptWithSalt(jsonString);\r",
											"\r",
											"        // Set the encrypted data as the new request body in JSON format\r",
											"        pm.request.body.raw = JSON.stringify({ \"data\": encryptedData });\r",
											"\r",
											"    } catch (error) {\r",
											"        // Print the error message and stack trace\r",
											"        console.error(\"An error occurred:\", error.message);\r",
											"        console.error(\"Stack trace:\", error.stack);  // This will print the stack trace\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mobile\":\"9899378106\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{auth_route}}/login",
									"host": [
										"{{auth_route}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify otp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Require the crypto-js module\r",
											"const CryptoJS = require('crypto-js');\r",
											"\r",
											"// Retrieve cookies and insert them\r",
											"const cookies = pm.environment.get('cookie');\r",
											"cookies.forEach((cookie, index) => {\r",
											"    pm.cookies.insert(cookie);\r",
											"});\r",
											"\r",
											"// Retrieve salt from cookies and check if it exists\r",
											"const salt = pm.cookies.get('Session-SALT')[\"value\"];\r",
											"if (!salt) {\r",
											"    // Log an error and stop the script if salt is undefined\r",
											"    console.error(\"Error: 'Session-SALT' cookie is not defined.\");\r",
											"    pm.request.body.raw = JSON.stringify({ \"error\": \"Missing salt for encryption\" });\r",
											"} else {\r",
											"    // Hashing function using CryptoJS SHA-256\r",
											"    function hashSalt(salt) {\r",
											"        const hash = CryptoJS.SHA256(salt);\r",
											"        return hash.toString(CryptoJS.enc.Hex);\r",
											"    }\r",
											"\r",
											"    // Encryption function\r",
											"    function cipher(salt) {\r",
											"        const hashedSalt = hashSalt(salt);\r",
											"        const textToChars = text => text.split('').map(c => c.charCodeAt(0));\r",
											"        const byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2);\r",
											"        const applySaltToChar = code => textToChars(hashedSalt).reduce((a, b) => a ^ b, code);\r",
											"\r",
											"        return text => text.split('')\r",
											"            .map(textToChars)\r",
											"            .map(applySaltToChar)\r",
											"            .map(byteHex)\r",
											"            .join('');\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        // Encrypt JSON data with salt\r",
											"        const encryptWithSalt = cipher(salt);\r",
											"        const jsonData = JSON.parse(pm.request.body.raw);\r",
											"        const jsonString = JSON.stringify(jsonData);\r",
											"        console.log(jsonString);\r",
											"        const encryptedData = encryptWithSalt(jsonString);\r",
											"\r",
											"        // Set the encrypted data as the new request body in JSON format\r",
											"        pm.request.body.raw = JSON.stringify({ \"data\": encryptedData });\r",
											"\r",
											"    } catch (error) {\r",
											"        // Print the error message and stack trace\r",
											"        console.error(\"An error occurred:\", error.message);\r",
											"        console.error(\"Stack trace:\", error.stack);  // This will print the stack trace\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mobile\":\"9899378106\",\r\n    \"OTP\":\"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{auth_route}}/verify_otp",
									"host": [
										"{{auth_route}}"
									],
									"path": [
										"verify_otp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "faculty",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Require the crypto-js module\r",
											"const CryptoJS = require('crypto-js');\r",
											"\r",
											"// Retrieve cookies and insert them\r",
											"const cookies = pm.environment.get('cookie');\r",
											"cookies.forEach((cookie, index) => {\r",
											"    pm.cookies.insert(cookie);\r",
											"});\r",
											"\r",
											"// Retrieve salt from cookies and check if it exists\r",
											"const salt = pm.cookies.get('Session-SALT')[\"value\"];\r",
											"if (!salt) {\r",
											"    // Log an error and stop the script if salt is undefined\r",
											"    console.error(\"Error: 'Session-SALT' cookie is not defined.\");\r",
											"    pm.request.body.raw = JSON.stringify({ \"error\": \"Missing salt for encryption\" });\r",
											"} else {\r",
											"    // Hashing function using CryptoJS SHA-256\r",
											"    function hashSalt(salt) {\r",
											"        const hash = CryptoJS.SHA256(salt);\r",
											"        return hash.toString(CryptoJS.enc.Hex);\r",
											"    }\r",
											"\r",
											"    // Encryption function\r",
											"    function cipher(salt) {\r",
											"        const hashedSalt = hashSalt(salt);\r",
											"        const textToChars = text => text.split('').map(c => c.charCodeAt(0));\r",
											"        const byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2);\r",
											"        const applySaltToChar = code => textToChars(hashedSalt).reduce((a, b) => a ^ b, code);\r",
											"\r",
											"        return text => text.split('')\r",
											"            .map(textToChars)\r",
											"            .map(applySaltToChar)\r",
											"            .map(byteHex)\r",
											"            .join('');\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        // Encrypt JSON data with salt\r",
											"        const encryptWithSalt = cipher(salt);\r",
											"        const jsonData = JSON.parse(pm.request.body.raw);\r",
											"        const jsonString = JSON.stringify(jsonData);\r",
											"        console.log(jsonString);\r",
											"        const encryptedData = encryptWithSalt(jsonString);\r",
											"\r",
											"        // Set the encrypted data as the new request body in JSON format\r",
											"        pm.request.body.raw = JSON.stringify({ \"data\": encryptedData });\r",
											"\r",
											"    } catch (error) {\r",
											"        // Print the error message and stack trace\r",
											"        console.error(\"An error occurred:\", error.message);\r",
											"        console.error(\"Stack trace:\", error.stack);  // This will print the stack trace\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mobile\":\"9999999999\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{auth_route}}/login",
									"host": [
										"{{auth_route}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify otp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Require the crypto-js module\r",
											"const CryptoJS = require('crypto-js');\r",
											"\r",
											"// Retrieve cookies and insert them\r",
											"const cookies = pm.environment.get('cookie');\r",
											"cookies.forEach((cookie, index) => {\r",
											"    pm.cookies.insert(cookie);\r",
											"});\r",
											"\r",
											"// Retrieve salt from cookies and check if it exists\r",
											"const salt = pm.cookies.get('Session-SALT')[\"value\"];\r",
											"if (!salt) {\r",
											"    // Log an error and stop the script if salt is undefined\r",
											"    console.error(\"Error: 'Session-SALT' cookie is not defined.\");\r",
											"    pm.request.body.raw = JSON.stringify({ \"error\": \"Missing salt for encryption\" });\r",
											"} else {\r",
											"    // Hashing function using CryptoJS SHA-256\r",
											"    function hashSalt(salt) {\r",
											"        const hash = CryptoJS.SHA256(salt);\r",
											"        return hash.toString(CryptoJS.enc.Hex);\r",
											"    }\r",
											"\r",
											"    // Encryption function\r",
											"    function cipher(salt) {\r",
											"        const hashedSalt = hashSalt(salt);\r",
											"        const textToChars = text => text.split('').map(c => c.charCodeAt(0));\r",
											"        const byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2);\r",
											"        const applySaltToChar = code => textToChars(hashedSalt).reduce((a, b) => a ^ b, code);\r",
											"\r",
											"        return text => text.split('')\r",
											"            .map(textToChars)\r",
											"            .map(applySaltToChar)\r",
											"            .map(byteHex)\r",
											"            .join('');\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        // Encrypt JSON data with salt\r",
											"        const encryptWithSalt = cipher(salt);\r",
											"        const jsonData = JSON.parse(pm.request.body.raw);\r",
											"        const jsonString = JSON.stringify(jsonData);\r",
											"        console.log(jsonString);\r",
											"        const encryptedData = encryptWithSalt(jsonString);\r",
											"\r",
											"        // Set the encrypted data as the new request body in JSON format\r",
											"        pm.request.body.raw = JSON.stringify({ \"data\": encryptedData });\r",
											"\r",
											"    } catch (error) {\r",
											"        // Print the error message and stack trace\r",
											"        console.error(\"An error occurred:\", error.message);\r",
											"        console.error(\"Stack trace:\", error.stack);  // This will print the stack trace\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mobile\":\"9999999999\",\r\n    \"OTP\":\"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{auth_route}}/verify_otp",
									"host": [
										"{{auth_route}}"
									],
									"path": [
										"verify_otp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "index",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth_route}}/",
							"host": [
								"{{auth_route}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "article",
			"item": [
				{
					"name": "index",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{article_route}}/",
							"host": [
								"{{article_route}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "table",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "API-ID",
								"value": "43576556-30fd-483c-b95a-28da3a950388",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{article_route}}/table",
							"host": [
								"{{article_route}}"
							],
							"path": [
								"table"
							]
						}
					},
					"response": []
				},
				{
					"name": "single article fetch",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "API-ID",
								"value": "43576556-30fd-483c-b95a-28da3a950388",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{article_route}}/e5816fa1-873f-44e0-9595-065afb132a0f",
							"host": [
								"{{article_route}}"
							],
							"path": [
								"e5816fa1-873f-44e0-9595-065afb132a0f"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload ris",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa72d0-7e83-44c0-a851-f5d3bad3d491"
								}
							]
						},
						"url": {
							"raw": "{{article_route}}/upload_ris",
							"host": [
								"{{article_route}}"
							],
							"path": [
								"upload_ris"
							]
						}
					},
					"response": []
				},
				{
					"name": "pubmed fetch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Require the crypto-js module\r",
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"// Retrieve cookies and insert them\r",
									"const cookies = pm.environment.get('cookie');\r",
									"cookies.forEach((cookie, index) => {\r",
									"    pm.cookies.insert(cookie);\r",
									"});\r",
									"\r",
									"// Retrieve salt from cookies and check if it exists\r",
									"const salt = pm.cookies.get('Session-SALT')[\"value\"];\r",
									"if (!salt) {\r",
									"    // Log an error and stop the script if salt is undefined\r",
									"    console.error(\"Error: 'Session-SALT' cookie is not defined.\");\r",
									"    pm.request.body.raw = JSON.stringify({ \"error\": \"Missing salt for encryption\" });\r",
									"} else {\r",
									"    // Hashing function using CryptoJS SHA-256\r",
									"    function hashSalt(salt) {\r",
									"        const hash = CryptoJS.SHA256(salt);\r",
									"        return hash.toString(CryptoJS.enc.Hex);\r",
									"    }\r",
									"\r",
									"    // Encryption function\r",
									"    function cipher(salt) {\r",
									"        const hashedSalt = hashSalt(salt);\r",
									"        const textToChars = text => text.split('').map(c => c.charCodeAt(0));\r",
									"        const byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2);\r",
									"        const applySaltToChar = code => textToChars(hashedSalt).reduce((a, b) => a ^ b, code);\r",
									"\r",
									"        return text => text.split('')\r",
									"            .map(textToChars)\r",
									"            .map(applySaltToChar)\r",
									"            .map(byteHex)\r",
									"            .join('');\r",
									"    }\r",
									"\r",
									"    try {\r",
									"        // Encrypt JSON data with salt\r",
									"        const encryptWithSalt = cipher(salt);\r",
									"        const jsonData = JSON.parse(pm.request.body.raw);\r",
									"        const jsonString = JSON.stringify(jsonData);\r",
									"        console.log(jsonString);\r",
									"        const encryptedData = encryptWithSalt(jsonString);\r",
									"\r",
									"        // Set the encrypted data as the new request body in JSON format\r",
									"        pm.request.body.raw = JSON.stringify({ \"data\": encryptedData });\r",
									"\r",
									"    } catch (error) {\r",
									"        // Print the error message and stack trace\r",
									"        console.error(\"An error occurred:\", error.message);\r",
									"        console.error(\"Stack trace:\", error.stack);  // This will print the stack trace\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pmid\":\"35225509\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{article_route}}/pubmedFectch",
							"host": [
								"{{article_route}}"
							],
							"path": [
								"pubmedFectch"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload nbib",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa72d2-ae51-4d80-9849-504a3352d9de"
								}
							]
						},
						"url": {
							"raw": "{{article_route}}/upload_nbib",
							"host": [
								"{{article_route}}"
							],
							"path": [
								"upload_nbib"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "super admin",
			"item": [
				{
					"name": "db fetch",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{superadmin_route}}/dbFetch",
							"host": [
								"{{superadmin_route}}"
							],
							"path": [
								"dbFetch"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}